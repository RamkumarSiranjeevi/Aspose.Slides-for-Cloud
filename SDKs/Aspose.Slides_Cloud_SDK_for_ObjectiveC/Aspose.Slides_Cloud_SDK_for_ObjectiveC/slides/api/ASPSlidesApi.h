#import <Foundation/Foundation.h>
#import "ASPBaseResponse.h"
#import "ASPDocumentPropertiesResponse.h"
#import "ASPDocumentProperties.h"
#import "ASPDocumentPropertyResponse.h"
#import "ASPDocumentProperty.h"
#import "ASPCommonResponse.h"
#import "ASPImagesResponse.h"
#import "ASPOrderedMergeRequest.h"
#import "ASPDocumentResponse.h"
#import "ASPPresentationsMergeRequest.h"
#import "ASPPresentationStringReplaceResponse.h"
#import "ASPHtmlExportOptions.h"
#import "ASPPdfExportOptions.h"
#import "ASPTiffExportOptions.h"
#import "ASPSlideListResponse.h"
#import "ASPSlideBackgroundResponse.h"
#import "ASPSlideCommentsResponse.h"
#import "ASPPlaceholdersResponse.h"
#import "ASPPlaceholderResponse.h"
#import "ASPSlideStringReplaceResponse.h"
#import "ASPShape.h"
#import "ASPPortion.h"
#import "ASPTextItemsResponse.h"
#import "ASPThemeResponse.h"
#import "ASPColorSchemeResponse.h"
#import "ASPFontSchemeResponse.h"
#import "ASPFormatSchemeResponse.h"
#import "ASPSplitDocumentResponse.h"
#import "ASPObject.h"
#import "ASPApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPSlidesApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPSlidesApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;



///
///
/// Convert presentation from request content to format specified.
/// 
///
/// @param file 
/// @param password The document password.
/// @param format The format.
/// @param outPath Path to save result
/// 
///
/// @return NSURL*
-(NSNumber*) putSlidesConvertWithCompletionBlock :(NSURL*) file 
     password:(NSString*) password 
     format:(NSString*) format 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Get slides document in specified format
///
///
/// @param name The document name.
/// @param format The slides document format.
/// @param jpegQuality
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// @param outPath
///
///
/// @return NSURL*
-(NSNumber*) getSlidesDocumentWithFormatWithCompletionBlock :(NSString*) name
                                                      format:(NSString*) format
                                                 jpegQuality:(NSString*) jpegQuality
                                                    password:(NSString*) password
                                                     storage:(NSString*) storage
                                                      folder:(NSString*) folder 
                                                     outPath:(NSString*) outPath 

                                           completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
///
///
///
/// @param name The document name.
/// @param templatePath
/// @param file
/// @param templateStorage
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
///
///
/// @return ASPBaseResponse*
-(NSNumber*) putNewPresentationFromStoredTemplateWithCompletionBlock :(NSString*) name
                                                         templatePath:(NSString*) templatePath
                                                                 file:(NSURL*) file
                                                      templateStorage:(NSString*) templateStorage
                                                             password:(NSString*) password
                                                              storage:(NSString*) storage 
                                                               folder:(NSString*) folder 

                                                    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;



///
///
/// Read presentation info.
/// 
///
/// @param name The document name.
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getSlidesDocumentWithCompletionBlock :(NSString*) name 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Create presentation
/// 
///
/// @param name The document name.
/// @param file 
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putNewPresentationWithCompletionBlock :(NSString*) name 
     file:(NSURL*) file 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Create presentation
/// 
///
/// @param name The document name.
/// @param templatePath Template file path.
/// @param file 
/// @param templateStorage Template storage name.
/// @param isImageDataEmbeeded Is Image Data Embeeded
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postSlidesDocumentWithCompletionBlock :(NSString*) name 
     templatePath:(NSString*) templatePath 
     file:(NSURL*) file 
     templateStorage:(NSString*) templateStorage 
     isImageDataEmbeeded:(NSNumber*) isImageDataEmbeeded 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read presentation document properties.
/// 
///
/// @param name The document name.
/// @param folder Document&#39;s folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPDocumentPropertiesResponse*
-(NSNumber*) getSlidesDocumentPropertiesWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Set document properties.
/// 
///
/// @param name The document name.
/// @param properties New properties.
/// @param folder Document&#39;s folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPDocumentPropertiesResponse*
-(NSNumber*) postSlidesSetDocumentPropertiesWithCompletionBlock :(NSString*) name 
     properties:(ASPDocumentProperties*) properties 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Clean document properties.
/// 
///
/// @param name The presentation name.
/// @param folder The presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPDocumentPropertiesResponse*
-(NSNumber*) deleteSlidesDocumentPropertiesWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read presentation document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param folder Document&#39;s folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) getSlidesDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Set document property.
/// 
///
/// @param name The presentation name.
/// @param propertyName The property name.
/// @param _property Property with the value.
/// @param folder Document&#39;s folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) putSlidesSetDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     _property:(ASPDocumentProperty*) _property 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete document property.
/// 
///
/// @param name The presentation name.
/// @param propertyName The property name.
/// @param folder The presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPCommonResponse*
-(NSNumber*) deleteSlidesDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPCommonResponse* output, NSError* error))completionBlock;
    


///
///
/// Create presentation document from html
/// 
///
/// @param name The document name.
/// @param file 
/// @param password The document password.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putSlidesDocumentFromHtmlWithCompletionBlock :(NSString*) name 
     file:(NSURL*) file 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read presentation images info.
/// 
///
/// @param name The presentation name.
/// @param folder The presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPImagesResponse*
-(NSNumber*) getSlidesImagesWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPImagesResponse* output, NSError* error))completionBlock;
    


///
///
/// Merge presentations.
/// 
///
/// @param name Original presentation name.
/// @param request {PresentationsMergeRequest} with a list of presentations to merge.
/// @param storage The storage.
/// @param folder The folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) putPresentationMergeWithCompletionBlock :(NSString*) name 
     request:(ASPOrderedMergeRequest*) request 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Merge presentations.
/// 
///
/// @param name Original presentation name.
/// @param request {PresentationsMergeRequest} with a list of presentations to merge.
/// @param storage The storage.
/// @param folder The folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postPresentationMergeWithCompletionBlock :(NSString*) name 
     request:(ASPPresentationsMergeRequest*) request 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Replace text by a new value.
/// 
///
/// @param name The presentation name.
/// @param oldValue Text value to replace.
/// @param newValue The new text value.
/// @param ignoreCase Is case must be ignored.
/// @param folder The presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPPresentationStringReplaceResponse*
-(NSNumber*) postSlidesPresentationReplaceTextWithCompletionBlock :(NSString*) name 
     oldValue:(NSString*) oldValue 
     newValue:(NSString*) newValue 
     ignoreCase:(NSNumber*) ignoreCase 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPPresentationStringReplaceResponse* output, NSError* error))completionBlock;
    


///
///
/// Saves presentation in html format with options
/// 
///
/// @param name The presentation name
/// @param options Tiff export options
/// @param password The password to open presentation.
/// @param storage Document&#39;s storage.
/// @param folder The presentation folder.
/// @param outPath The optional output path.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postSlidesSaveAsHtmlWithCompletionBlock :(NSString*) name 
     options:(ASPHtmlExportOptions*) options 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Saves presentation in pdf format with options
/// 
///
/// @param name The presentation name
/// @param options Pdf export options
/// @param password The password to open presentation.
/// @param storage Document&#39;s storage.
/// @param folder The presentation folder.
/// @param outPath The optional output path.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postSlidesSaveAsPdfWithCompletionBlock :(NSString*) name 
     options:(ASPPdfExportOptions*) options 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Saves presentation in tiff format with options
/// 
///
/// @param name The presentation name
/// @param options Tiff export options
/// @param password The password to open presentation.
/// @param storage Document&#39;s storage.
/// @param folder The presentation folder.
/// @param outPath The optional output path.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postSlidesSaveAsTiffWithCompletionBlock :(NSString*) name 
     options:(ASPTiffExportOptions*) options 
     password:(NSString*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;



///
///
/// Read presentation slides info.
/// 
///
/// @param name The presentation name.
/// @param folder The presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPSlideListResponse*
-(NSNumber*) getSlidesSlidesListWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
///
///
///
/// @param name The presentation name.
/// @param slideToClone
/// @param folder The presentation folder.
/// @param storage The presentation storage.
///
///
/// @return ASPSlideListResponse*
-(NSNumber*) postAddSlideCopyWithCompletionBlock :(NSString*) name
                                     slideToClone:(NSNumber*) slideToClone
                                           folder:(NSString*) folder
                                          storage:(NSString*) storage

                                completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
///
///
///
/// @param name The presentation name.
/// @param slideToCopy
/// @param source
/// @param position
/// @param folder The presentation folder.
/// @param storage The presentation storage.
///
///
/// @return ASPSlideListResponse*
-(NSNumber*) postCopySlideFromSourcePresentationWithCompletionBlock :(NSString*) name
                                                         slideToCopy:(NSNumber*) slideToCopy
                                                              source:(NSString*) source
                                                            position:(NSNumber*) position
                                                              folder:(NSString*) folder
                                                             storage:(NSString*) storage 

                                                   completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
///
///
///
/// @param name The presentation name.
/// @param position
/// @param slideToClone
/// @param folder The presentation folder.
/// @param storage The presentation storage.
///
///
/// @return ASPSlideListResponse*
-(NSNumber*) postClonePresentationSlideWithCompletionBlock :(NSString*) name
                                                   position:(NSNumber*) position
                                               slideToClone:(NSNumber*) slideToClone
                                                     folder:(NSString*) folder
                                                    storage:(NSString*) storage 

                                          completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
///
///
///
/// @param name The presentation name.
/// @param position
/// @param folder The presentation folder.
/// @param storage The presentation storage.
///
///
/// @return ASPSlideListResponse*
-(NSNumber*) postAddEmptySlideAtPositionWithCompletionBlock :(NSString*) name
                                                    position:(NSNumber*) position
                                                      folder:(NSString*) folder
                                                     storage:(NSString*) storage

                                           completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
/// Reorder presentation slide position
/// 
///
/// @param name The presentation name.
/// @param oldPosition The new presentation slide position.
/// @param newPosition The new presentation slide position.
/// @param folder The presentation folder.
/// @param storage The presentation storage.
/// 
///
/// @return ASPSlideListResponse*
-(NSNumber*) postSlidesReorderPositionWithCompletionBlock :(NSString*) name 
     oldPosition:(NSNumber*) oldPosition 
     newPosition:(NSNumber*) newPosition 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;
    


///
///
///
///
///
/// @param name The presentation name.
/// @param folder The presentation folder.
/// @param storage The presentation storage.
///
///
/// @return ASPSlideListResponse*
-(NSNumber*) postAddEmptySlideWithCompletionBlock :(NSString*) name
                                            folder:(NSString*) folder
                                           storage:(NSString*) storage

                                 completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;



///
///
/// Delete presentation slides.
/// 
///
/// @param name The presentation name.
/// @param folder The presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPSlideListResponse*
-(NSNumber*) deleteSlidesCleanSlidesListWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;
    


///
///
/// Get slide in specified format
///
///
/// @param name
/// @param slideIndex
/// @param format
/// @param width
/// @param height
/// @param folder
/// @param storage
///
///
/// @return NSURL*
-(NSNumber*) getSlideWithFormatWithCompletionBlock :(NSString*) name
                                         slideIndex:(NSNumber*) slideIndex
                                             format:(NSString*) format
                                              width:(NSNumber*) width
                                             height:(NSNumber*) height
                                             folder:(NSString*) folder 
                                            storage:(NSString*) storage 

                                  completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Read slide info.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getSlidesSlideWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete presentation slide by its index.
/// 
///
/// @param name The presentation name.
/// @param slideIndex The slide index.
/// @param folder The presentation folder.
/// @param storage The presentation storage.
/// 
///
/// @return ASPSlideListResponse*
-(NSNumber*) deleteSlideByIndexWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideListResponse* output, NSError* error))completionBlock;
    


///
///
/// Read presentation slide background color type.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPSlideBackgroundResponse*
-(NSNumber*) getSlidesSlideBackgroundWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideBackgroundResponse* output, NSError* error))completionBlock;
    


///
///
/// Set presentation slide background color.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param color 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPSlideBackgroundResponse*
-(NSNumber*) putSlidesSlideBackgroundWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     color:(NSString*) color 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideBackgroundResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove presentation slide background color.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPSlideBackgroundResponse*
-(NSNumber*) deleteSlidesSlideBackgroundWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideBackgroundResponse* output, NSError* error))completionBlock;
    


///
///
/// Read presentation slide comments.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPSlideCommentsResponse*
-(NSNumber*) getSlidesSlideCommentsWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideCommentsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide images info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex The slide index.
/// @param folder Presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPImagesResponse*
-(NSNumber*) getSlidesSlideImagesWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPImagesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide placeholders info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param folder Presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPPlaceholdersResponse*
-(NSNumber*) getSlidesPlaceholdersWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPPlaceholdersResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide placeholder info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param placeholderIndex Pleceholder index.
/// @param folder Presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPPlaceholderResponse*
-(NSNumber*) getSlidesPlaceholderWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     placeholderIndex:(NSNumber*) placeholderIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPPlaceholderResponse* output, NSError* error))completionBlock;
    


///
///
/// Replace text by a new value.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param oldValue Text to replace.
/// @param newerValue New text value.
/// @param ignoreCase Is case must be ignored.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPSlideStringReplaceResponse*
-(NSNumber*) postSlidesSlideReplaceTextWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     oldValue:(NSString*) oldValue 
     newerValue:(NSString*) newerValue 
     ignoreCase:(NSNumber*) ignoreCase 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPSlideStringReplaceResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slides shapes info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getSlidesSlideShapesWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Creates new shape.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param shape Shape.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postAddNewShapeWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shape:(ASPShape*) shape 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Render shape to specified picture format.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param shapeIndex Index of shape starting from 1
/// @param format Export picture format.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// @param scaleX X scale ratio.
/// @param scaleY Y scale ratio.
/// @param bounds Shape thumbnail bounds type.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getShapeWithFormatWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapeIndex:(NSNumber*) shapeIndex 
     format:(NSString*) format 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
     scaleX:(NSNumber*) scaleX 
     scaleY:(NSNumber*) scaleY 
     bounds:(NSString*) bounds 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Reads a list of paragraphs in shape's textBody.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Index of slide starting from 1
/// @param shapeIndex Index of shape starting from 1
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getSlideShapeParagraphsWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapeIndex:(NSNumber*) shapeIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Reads paragraph in shape's textBody.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Index of slide starting from 1
/// @param shapeIndex Index of shape starting from 1
/// @param paragraphIndex Index of paragraph starting from 1
/// @param folder Presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getShapeParagraphWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapeIndex:(NSNumber*) shapeIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Reads paragraph portion in shape's textBody.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Index of slide starting from 1
/// @param shapeIndex Index of shape starting from 1
/// @param paragraphIndex Index of paragraph starting from 1
/// @param portionIndex Index of portion starting from 1
/// @param folder Presentation folder.
/// @param storage Document&#39;s storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getParagraphPortionWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapeIndex:(NSNumber*) shapeIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     portionIndex:(NSNumber*) portionIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates paragraph portion properties.
/// 
///
/// @param name 
/// @param slideIndex 
/// @param shapeIndex 
/// @param paragraphIndex 
/// @param portionIndex 
/// @param portion 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putSetParagraphPortionPropertiesWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapeIndex:(NSNumber*) shapeIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     portionIndex:(NSNumber*) portionIndex 
     portion:(ASPPortion*) portion 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide shapes or shape info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param shapePath Shape path.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) getSlidesSlideShapesParentWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapePath:(NSString*) shapePath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates shape properties.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide index.
/// @param shapePath Shape path.
/// @param shape Shape
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putSlideShapeInfoWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     shapePath:(NSString*) shapePath 
     shape:(ASPShape*) shape 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Extract slide text items.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param withEmpty Include empty items.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) getSlidesSlideTextItemsWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     withEmpty:(NSNumber*) withEmpty 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide theme info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPThemeResponse*
-(NSNumber*) getSlidesThemeWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPThemeResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide theme color scheme info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPColorSchemeResponse*
-(NSNumber*) getSlidesThemeColorSchemeWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPColorSchemeResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide theme font scheme info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPFontSchemeResponse*
-(NSNumber*) getSlidesThemeFontSchemeWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPFontSchemeResponse* output, NSError* error))completionBlock;
    


///
///
/// Read slide theme color scheme info.
/// 
///
/// @param name Presentation name.
/// @param slideIndex Slide&#39;s index.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPFormatSchemeResponse*
-(NSNumber*) getSlidesThemeFormatSchemeWithCompletionBlock :(NSString*) name 
     slideIndex:(NSNumber*) slideIndex 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPFormatSchemeResponse* output, NSError* error))completionBlock;
    


///
///
/// Splitting presentations. Create one image per slide.
/// 
///
/// @param name The document name.
/// @param width The width of created images.
/// @param height The height of created images.
/// @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
/// @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
/// @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
/// @param format The format. Default value is jpeg.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSplitDocumentResponse*
-(NSNumber*) postSlidesSplitWithCompletionBlock :(NSString*) name 
     width:(NSNumber*) width 
     height:(NSNumber*) height 
     to:(NSNumber*) to 
     from:(NSNumber*) from 
     destFolder:(NSString*) destFolder 
     format:(NSString*) format 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSplitDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Extract presentation text items.
/// 
///
/// @param name Presentation name.
/// @param withEmpty Incude empty items.
/// @param folder Presentation folder.
/// @param storage Presentation storage.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) getSlidesPresentationTextItemsWithCompletionBlock :(NSString*) name 
     withEmpty:(NSNumber*) withEmpty 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    



@end
